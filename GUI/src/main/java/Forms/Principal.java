package Forms;

import javax.swing.*;
import java.awt.*;
import Logical.Matriz; //Para la generacion de la matriz
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.jpl7.Atom;// Para prolog
import org.jpl7.Compound; //Prolog
import org.jpl7.Query; // Prolog
import org.jpl7.Term; //Prolog

public class Principal extends javax.swing.JFrame {

    private JButton[][] botones;
    
    public Principal() {
        
        //Se genera l anueva matriz con las palabras que estan en la lista de palabras
        Matriz generarMatriz = new Matriz();
        generarMatriz.cargarPalabras();
        generarMatriz.generateSopaDeLetras();
        char[][] mat = generarMatriz.getMatriz();
        
        //Al iniciar componentes se manda la matriz y la longitud
        initComponents();
        rellenarMatriz(mat, mat.length);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rellenarMatriz(char[][] mat, int longitud ){
        setTitle("Sopa de Letras");
        setSize(300, 300);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(longitud, longitud));
        char[][] matriz = mat;

        botones = new JButton[longitud][longitud];

        for (int i = 0; i < matriz.length; i++) {
            for (int j = 0; j < matriz[i].length; j++) {
                botones[i][j] = new JButton(String.valueOf(matriz[i][j]));
                add(botones[i][j]);
            }
        }
        this.botones = botones;
        }

    
    
    
    /**
     * Funcion que se encarga de pintar los botones para simular la sopa de letras completada
     * @param ubicaciones Lista con las palabras e ubicaciones
     */
    public void pintarBotones(List<List<Object>> ubicaciones) {
        Color[] colores = {Color.CYAN, Color.BLUE,Color.GRAY,Color.GREEN,Color.ORANGE,Color.PINK,Color.YELLOW,Color.MAGENTA,Color.DARK_GRAY,Color.RED};
        List<String> palabrasRec = new ArrayList<>();
        int contador = 0;
        int microContador = 0;
        
        for (List<Object> ubicacion : ubicaciones) { //Se recorren todas las palabras
            String palabraAct = (String) ubicacion.get(0);
            palabrasRec.add(palabraAct);
            if(palabrasRec.size()>1){
                if(palabrasRec.get(microContador-1).equals(palabrasRec.get(microContador))){
                    contador--;
                }
            }
            microContador ++;
            
     
            List<List<Integer>> coordenadas = (List<List<Integer>>) ubicacion.get(1);
            for (List<Integer> coordenada : coordenadas) { //Se recorren todas las ubicacioens de una palabra
                int fila = coordenada.get(0);
                int columna = coordenada.get(1);
                // Comprueba si el botón ya está pintado
                if (botones[fila][columna].getBackground() != UIManager.getColor("Button.background")) {
                    // Si ya está pintado, cámbialo a negro
                    botones[fila][columna].setBackground(Color.BLACK);
                    botones[fila][columna].setForeground(Color.WHITE);
                } else {
                    // Si no está pintado, establece el color del contador
                    botones[fila][columna].setBackground(colores[contador]);
                }   
            }
             contador++;
        } 
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Principal principal = new Principal();
                List<List<Object>> ubicaciones = solucion();
                principal.pintarBotones(ubicaciones);
                principal.setVisible(true);
                
            }
        });    
    }
    
    
    private static List<List<Object>> solucion(){
        Query query = new Query("consult", new Term[] {new Atom("resolver_sopa_letras.pl")});
        List<List<Object>> resultado = null;
        if (!query.hasSolution()) {
            System.out.println("No se pudo cargar el archivo de reglas.");
        }

        query = new Query("ubicaciones_palabras(X)");
        if (query.hasSolution()) {
            Term solucion = query.oneSolution().get("X");
            resultado = procesarSolucion(solucion);
            System.out.println("La solución de X es: " + resultado);
        } else {
            System.out.println("No hay solución para X.");
        }
        return resultado;
    }
    
    /**
     * Funcion que se encarga de obtener todos los terminos de prolog de las palabras y sus ubicaciones
     * y darle un formato de lita
     * @param term
     * @return 
     */
    private static List<List<Object>> procesarSolucion(Term term) {

        List<List<Object>> resultado = new ArrayList<>();

        for (Term element : term.toTermArray()) {
            if (element.isCompound() && element.arity() == 2) {
                Compound compound = (Compound) element;
                String nombre = compound.arg(1).toString();
                Term coordinates = compound.arg(2);
                List<Object> sublist = new ArrayList<>();
                sublist.add(nombre);

                if (coordinates.isList()) {
                    List<Object> coordinateList = new ArrayList<>();
                    for (Term coordinate : coordinates.toTermArray()) {
                        if (coordinate.isCompound() && coordinate.arity() == 2) {
                            coordinateList.add(Arrays.asList(coordinate.arg(1).intValue(), coordinate.arg(2).intValue()));
                        }
                    }
                    sublist.add(coordinateList);
                }
                resultado.add(sublist);
            }
        }
        return resultado;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
